{"version":3,"sources":["components/Header.js","constants.js","components/Footer.js","components/Home.js","components/Questionnaire.js","components/ExamList.js","components/ExamPage.js","components/ReportPage.js","components/Main.js","components/Login.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","handleLogin","props","showLoginForm","showRegisterForm","handleRegister","handleLogOut","localStorage","removeItem","loggedOut","handleOpenSavedTrips","showMenu","isLoggedIn","Dropdown","Item","className","type","onClick","Divider","customToggle","React","forwardRef","ref","children","href","e","preventDefault","Link","to","Toggle","as","this","id","width","height","viewBox","xmlns","d","fillRule","Menu","Component","Footer","year","Date","getFullYear","Home","history","push","pathname","Paper","Button","variant","color","turnToExamList","bind","withRouter","Questionnaire","makeStyles","theme","root","display","formControl","margin","spacing","saveAnswer","console","log","exam","state","questions","Question","cancel","ans","FormControlLabel","control","Checkbox","name","label","question","items","answer","forEach","renderAnswer","Dialog","open","PaperComponent","aria-labelledby","fullWidth","Grid","container","item","FormControl","required","component","FormLabel","FormGroup","renderQuestion","ExamList","useState","setItems","setOpen","setCourse","useEffect","render","Exam","renderExam","loadExam","openQuestionary","course","Typography","time","title","ExamPage","FinishExam","match","params","examId","keyword","result","selected","activeCategory","placeToView","showForm","isLoading","categories","Form","Group","controlId","Label","Control","placeholder","multiple","rows","ReportPage","onSearch","Main","Switch","Route","exact","path","Login","RegisterSchema","yup","email","password","confirm_password","oneOf","LoginSchema","switchToRegister","switchToLogin","hideRegisterForm","hideLoginForm","handleSubmitLogin","event","setSubmitting","url","Axios","method","data","then","response","operationResponse","failed","setItem","token","loggedIn","catch","err","handleSubmitRegister","userName","Modal","show","isLoginForm","onHide","closeButton","Title","Body","validationSchema","onSubmit","initialValues","handleSubmit","handleChange","touched","resetForm","handleBlur","values","errors","isValid","noValidate","onChange","isInvalid","Feedback","size","block","isRegisterForm","Text","App","getItem","setState","Boolean","window","location","hostname","ReactDOM","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8c7ed970.chunk.js","sourcesContent":["import React from 'react';\nimport { Dropdown } from 'react-bootstrap'\nimport { Link } from \"react-router-dom\";\nimport {ID, TOKEN_KEY} from '../constants';\n\nclass Header extends React.Component {\n    handleLogin = () => {\n        this.props.showLoginForm(true);\n        this.props.showRegisterForm(false);\n    };\n\n    handleRegister = () => {\n        this.props.showRegisterForm(true);\n        this.props.showLoginForm(false);\n    };\n\n    handleLogOut = () => {\n        localStorage.removeItem(TOKEN_KEY);\n        localStorage.removeItem(ID);\n        this.props.loggedOut();\n    }\n\n    handleOpenSavedTrips = () => {\n        this.props.handleOpenSavedTrips();\n    }\n\n    showMenu = () => {\n        if (this.props.isLoggedIn) {\n            return <div>\n                <Dropdown.Item className=\"dropdown-item\" type=\"button\" onClick={this.handleOpenSavedTrips}>Saved Trip</Dropdown.Item>\n                <Dropdown.Divider />\n                <Dropdown.Item className=\"dropdown-item\" type=\"button\" onClick={this.handleLogOut}>Log out</Dropdown.Item>\n            </div>\n        }\n        else {\n            return <div>\n                <Dropdown.Item className=\"dropdown-item\" type=\"button\" onClick={this.handleLogin}>Log in</Dropdown.Item>\n                <Dropdown.Item className=\"dropdown-item\" type=\"button\" onClick={this.handleRegister}>Register</Dropdown.Item>\n            </div>\n        }\n    }\n\n    customToggle = React.forwardRef(({ children, onClick }, ref) => (\n        <a\n            href=\"/\"\n            ref={ref}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        >\n            {children}\n        </a>\n    ));\n\n    render() {\n        return (\n            <div className=\"app-header\">\n                <Link to=\"/\" className=\"logo\">\n                    Exam Center\n                </Link>\n                <div className=\"DropDown\">\n                    <Dropdown>\n                        <Dropdown.Toggle as={this.customToggle} id=\"dropdown-custom-components\">\n                            {this.props.isLoggedIn?\n                                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-person-circle avatar-LoggedIn\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path d=\"M13.468 12.37C12.758 11.226 11.195 10 8 10s-4.757 1.225-5.468 2.37A6.987 6.987 0 0 0 8 15a6.987 6.987 0 0 0 5.468-2.63z\"/>\n                                    <path fillRule=\"evenodd\" d=\"M8 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\"/>\n                                    <path fillRule=\"evenodd\" d=\"M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1zM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8z\"/>\n                                </svg>\n                                :\n                                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-person-circle avatar\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path d=\"M13.468 12.37C12.758 11.226 11.195 10 8 10s-4.757 1.225-5.468 2.37A6.987 6.987 0 0 0 8 15a6.987 6.987 0 0 0 5.468-2.63z\"/>\n                                    <path fillRule=\"evenodd\" d=\"M8 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\"/>\n                                    <path fillRule=\"evenodd\" d=\"M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1zM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8z\"/>\n                                </svg>\n                            }\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            {this.showMenu()}\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;\n","export const TOKEN_KEY = 'TOKEN_KEY';\n\n//backend server\nexport const URL = \"http://0.0.0.0:5000\"\nexport const ID = 'ID';","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        const now = new Date();\n        const year = now.getFullYear();\n        return (\n            <div className=\"footer\">\n                &copy; Copyright {year}, Exam Center!\n            </div>\n        );\n    }\n}\n\nexport default Footer;","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport { withRouter } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport ButtonBase from '@material-ui/core/ButtonBase';\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  turnToExamList(){\n    this.props.history.push({\n      pathname: `/exam`,\n    })\n  }\n\n  render() {\n\n    return (\n      <div>\n        <Paper className=\"home\">\n          <Button variant=\"contained\" color=\"primary\" onClick={this.turnToExamList.bind(this)}> Student </Button>\n          <br/>\n          <br/>\n          <br/>\n          <Button variant=\"contained\" color=\"primary\"> Professor </Button>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Home);","import React, {Component} from 'react';\nimport {Card, ListGroup, Form, Modal, Spinner} from 'react-bootstrap';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { withRouter } from 'react-router-dom';\nimport Question from '../data/sampleQuestion.json';\nimport fetch from 'node-fetch';\nimport axios from \"axios\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { Dialog } from \"@material-ui/core\";\nimport Draggable from 'react-draggable';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    formControl: {\n        margin: theme.spacing(3),\n    },\n}));\n\n\n\nclass Questionnaire extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            questions : Question,\n        }\n    }\n\n    PaperComponent(props) {\n        return (\n          <Draggable cancel={'[class*=\"MuiDialogContent-root\"]'}>\n              <Paper {...props} />\n          </Draggable>\n        );\n    }\n\n    saveAnswer = () => {\n        console.log(this.props);\n        this.props.history.push({\n            pathname: `/exam/${this.props.exam}`,\n        })\n    }\n\n    renderAnswer(ans) {\n        return (\n          <div>\n              <FormControlLabel\n                control={<Checkbox color=\"primary\" name={ans} />}\n                label= {ans}\n              />\n          </div>\n        )\n    }\n\n\n    renderQuestion(question) {\n        const items = [];\n\n        question.answer.forEach(ans => {\n            items.push(this.renderAnswer(ans))\n        })\n        return(\n          <div>\n              <Dialog\n                open={this.props.open}\n                PaperComponent={this.PaperComponent}\n                aria-labelledby={'Assign groups'}\n                fullWidth={true}\n              >\n                  <Grid container spacing={2} >\n                      <Grid item className='questionaire_grid'>\n                          <Paper>\n                              <FormControl required component=\"fieldset\" className=''>\n                                  <FormLabel component=\"legend\">{question.question}</FormLabel>\n                                  <FormGroup>\n                                      {items}\n                                  </FormGroup>\n                              </FormControl>\n                          </Paper>\n\n                      </Grid>\n\n                  </Grid>\n                  <br/>\n              </Dialog>\n          </div>\n        )\n    }\n\n    render() {\n        const items = [];\n        console.log(Question);\n        this.state.questions.forEach(question => {\n            items.push(this.renderQuestion(question))\n        })\n        return (\n            <div>\n                <Paper className=\"questionaire\">\n                    {items}\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.saveAnswer.bind(this)}> Save Answer </Button>\n                </Paper>\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Questionnaire);","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport { withRouter } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Exam from '../data/examList.json';\nimport Questionnaire from \"./Questionnaire\";\n\nconst ExamList = () => {\n  const [items, setItems] = React.useState([]);\n  const [open, setOpen] = React.useState(false);\n  const [course, setCourse] = React.useState(\"\");\n\n  React.useEffect(() => {\n    const loadExam = () => {\n      const render = [];\n      Exam.forEach(exam => {\n        render.push(renderExam(exam))\n      })\n      setItems(render);\n    }\n    loadExam();\n  }, []);\n\n  const openQuestionary = (course) => {\n    setCourse(course);\n    setOpen(true);\n  }\n\n  const renderExam = (exam) => {\n    return(\n      <div>\n        <Grid container spacing={2} >\n          <Grid item className='exam_grid'>\n            <Paper>\n              <Typography variant=\"h4\" color=\"primary\">\n                {exam.course}\n              </Typography>\n              <Typography variant=\"body1\" color=\"textPrimary\">\n                {exam.time}\n              </Typography>\n              <Typography variant=\"body1\" color=\"textPrimary\">\n                {exam.title}\n              </Typography>\n              <Button className='exam_button' variant=\"contained\" color=\"primary\"\n                      onClick={openQuestionary(exam.course)}>\n                Start Exam\n              </Button>\n            </Paper>\n\n          </Grid>\n\n        </Grid>\n        <br/>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <Paper className=\"exam_list\">\n        {items}\n\n      </Paper>\n\n      {/*<Questionnaire*/}\n      {/*  open={open}*/}\n      {/*  exam={course}*/}\n      {/*/>*/}\n    </div>\n  );\n}\n\nexport default ExamList;","import React, {Component} from 'react';\nimport {Button, Form} from \"react-bootstrap\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {withRouter} from \"react-router-dom\";\n\nclass ExamPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyword: '',\n      result: [],\n      selected: [],\n      activeCategory: null,\n      placeToView: null,\n      showForm: false,\n      isLoading: false,\n      categories: [\"test1\"]\n    }\n  }\n\n  FinishExam = () => {\n    this.props.history.push({\n      pathname: `/exam/${this.props.match.params.examId}/report`,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"exam\">\n        <Form className=\"question-part\">\n          <Typography variant=\"h4\" color=\"primary\">\n            {this.props.match.params.examId}\n          </Typography>\n          <Form.Group controlId=\"userForm\">\n            <Form.Label>Your Name</Form.Label>\n            <Form.Control type=\"email\" placeholder=\"Enter your Name\" />\n          </Form.Group>\n\n          <Form.Group controlId=\"questionForm1\">\n            <Form.Label>Question list</Form.Label>\n            <Form.Control as=\"select\">\n              <option>1</option>\n              <option>2</option>\n              <option>3</option>\n              <option>4</option>\n              <option>5</option>\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"questionForm2\">\n            <Form.Label>Select following Answer</Form.Label>\n            <Form.Control as=\"select\" multiple>\n              <option>Question 1</option>\n              <option>Question 2</option>\n              <option>Question 3</option>\n              <option>Question 4</option>\n              <option>Question 5</option>\n            </Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"answerForm\">\n            <Form.Label>Type you answer below:</Form.Label>\n            <Form.Control placeholder=\"Type your answer\" as=\"textarea\" rows=\"3\" />\n          </Form.Group>\n          <Button variant=\"primary\" onClick={this.FinishExam.bind(this)}>Submit Answer </Button>\n        </Form>\n        <br/>\n\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ExamPage);","import React, {Component} from 'react';\nimport {Button, Form} from \"react-bootstrap\";\nimport Paper from \"@material-ui/core/Paper/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass ReportPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyword: '',\n      result: [],\n      selected: [],\n      activeCategory: null,\n      placeToView: null,\n      showForm: false,\n      isLoading: false,\n      categories: [\"test1\"]\n    }\n  }\n\n  onSearch = () => {\n\n  }\n\n  render() {\n    return (\n      <div className=\"questionnaire\">\n        <div>\n          <Paper className=\"report\">\n            <Typography variant=\"body1\">\n              Below is the user search history during the exam:\n            </Typography>\n            <br/>\n            <Typography variant=\"body1\">\n              https://www.chegg.com/writing/\n            </Typography>\n            <Typography variant=\"body1\">\n              https://stackoverflow.com/questions/53722893/how-to-retrieve-data-from-promise-object-in-react-js\n            </Typography>\n          </Paper>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default ReportPage;","import React, {Component} from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from \"./Home\";\nimport ExamList from \"./ExamList\"\nimport ExamPage from \"./ExamPage\"\nimport ReportPage from \"./ReportPage\"\nimport Questionnaire from \"./Questionnaire\";\nimport fetch from 'node-fetch';\n\n\nclass Main extends Component {\n\n    render() {\n        return (\n            <Switch>\n                <Route exact path=\"/\">\n                    <Home />\n                </Route>\n\n                <Route exact path=\"/exam\">\n                    <ExamList />\n                </Route>\n\n                <Route exact path=\"/exam/:examId\">\n                    <ExamPage />\n                </Route>\n\n                {/*<Route exact path=\"/exam/:examId/questionnaire\">*/}\n                {/*    <Questionnaire />*/}\n                {/*</Route>*/}\n\n                <Route exact path=\"/exam/:examId/report\">\n                    <ReportPage />\n                </Route>\n            </Switch>\n\n        );\n    }\n}\n\nexport default Main;","import React, {Component} from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap'\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Axios from 'axios';\nimport { URL, TOKEN_KEY, ID} from '../constants';\n\nclass Login extends Component {\n\n    //Schemas used to validate input of form.\n    RegisterSchema = yup.object({\n        email: yup.string().email('Invalid email address').required('Email is required'),\n        password: yup.string().required('Password is required'),\n        confirm_password: yup.string()\n            .oneOf([yup.ref('password'), null], \"Password does not match\")\n            .required('Password confirm is required'),\n    })\n    LoginSchema = yup.object({\n        email: yup.string().email('Invalid email address').required('Email is required'),\n        password: yup.string().required('Password is required'),\n    })\n\n    //When forms close, need to set the state of its parent(App) back to false.\n\n    switchToRegister = () => {\n        this.props.showLoginForm(false);\n        this.props.showRegisterForm(true);\n    }\n\n    switchToLogin = () => {\n        this.props.showRegisterForm(false);\n        this.props.showLoginForm(true);\n    }\n\n    hideRegisterForm = () => {\n        this.props.showRegisterForm(false);\n    };\n\n    hideLoginForm = () => {\n        this.props.showLoginForm(false);\n    }\n\n    //Handle Submit. TODO(Http request.)\n    handleSubmitLogin = (event, { setSubmitting }) => {\n        const url = `${URL}/users/login`;\n        Axios({\n            method: 'POST',\n            url: url,\n            data: {\n                email: event.email,\n                password: event.password            }\n        })\n            .then(\n                response => {\n                    if (response.data.operationResponse.failed === false) {\n                        localStorage.setItem(TOKEN_KEY, response.data.token);\n                        localStorage.setItem(ID, response.data.id);\n                        this.props.loggedIn();\n                        this.props.showLoginForm(false);\n                    } else {\n                        console.log(\"Login failed\");\n                    }\n                    setSubmitting(false);\n                }\n            )\n            .catch(\n                err => {\n                    console.log(\"Login failed\");\n                }\n            )\n    }\n    handleSubmitRegister = (event) => {\n        const url = `${URL}/users/register`\n        Axios({\n            method: 'POST',\n            url: url,\n            data: {\n                email: event.email,\n                password: event.password,\n                userName: event.userName\n            }\n        })\n            .then(\n                response => {\n                    if (response.data.failed === false) {\n                        this.switchToLogin();\n                    }\n                }\n            )\n            .catch(\n                response => {\n                    console.log('failed')\n                }\n            )\n    }\n\n    render() {\n        return (\n            <div className=\".login\">\n                {/* Modal is the pop up window */}\n                {<Modal show={this.props.isLoginForm} onHide={this.hideLoginForm}>\n\n                    <Modal.Header closeButton>\n                        <Modal.Title>Sign In</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {/* Formik and yup are used to validate input of form */}\n                        <Formik\n                            validationSchema={this.LoginSchema}\n                            onSubmit={this.handleSubmitLogin}\n                            initialValues={{\n                                email: '',\n                                password: '',\n                            }}\n                        >\n                            {/* Form start here */}\n                            {({ handleSubmit,\n                                  handleChange,\n                                  resetForm,\n                                  handleBlur,\n                                  values,\n                                  touched,\n                                  isValid,\n                                  errors }) => (<Form noValidate onSubmit={handleSubmit}>\n                                    <Form.Group controlId=\"formBasicEmail\">\n                                        <Form.Label>Email address</Form.Label>\n                                        <Form.Control\n                                            type=\"email\"\n                                            placeholder=\"Enter email\"\n                                            name='email'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.email && touched.email}\n                                        />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.email}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                    <Form.Group controlId=\"formBasicPassword\">\n                                        <Form.Label>Password</Form.Label>\n                                        <Form.Control\n                                            type=\"password\"\n                                            placeholder=\"Password\"\n                                            name='password'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.password && touched.password}\n                                        />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.password}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                    <Button size=\"sm\" block=\"true\" variant=\"link\" onClick={this.switchToRegister}>\n                                        Not registered? Sign up\n                                    </Button> {' '}\n                                    <Button block=\"true\" className=\"Submit_Buttom\" variant=\"primary\" type=\"submit\">\n                                        Log in\n                                    </Button>\n                                </Form>\n                            )}\n                        </Formik>\n                    </Modal.Body>\n                </Modal>}\n\n                {<Modal show={this.props.isRegisterForm} onHide={this.hideRegisterForm}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Register</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n\n                        <Formik\n                            validationSchema={this.RegisterSchema}\n                            onSubmit={this.handleSubmitRegister}\n                            initialValues={{\n                                email: '',\n                                password: '',\n                                confirm_password: '',\n                            }}\n                        >\n                            {({ handleSubmit,\n                                  handleChange,\n                                  handleBlur,\n                                  values,\n                                  touched,\n                                  isValid,\n                                  errors }) => (<Form noValidate onSubmit={handleSubmit}>\n                                    <Form.Group controlId=\"formUserName\">\n                                        <Form.Label>Email Address</Form.Label>\n                                        <Form.Control\n                                            type=\"email\"\n                                            placeholder=\"Enter email\"\n                                            name='email'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.email && touched.email}\n                                        />\n                                        <Form.Text className=\"text-muted\">\n                                            We'll never share your email with anyone else.\n                                        </Form.Text>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.email}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n\n                                    <Form.Group controlId=\"formBasicEmail\">\n                                        <Form.Label>UserName</Form.Label>\n                                        <Form.Control\n                                            type=\"text\"\n                                            placeholder=\"UserName\"\n                                            name='userName'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.userName && touched.userName}\n                                        />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.userName}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n\n                                    <Form.Group controlId=\"formBasicPassword\">\n                                        <Form.Label>Password</Form.Label>\n                                        <Form.Control\n                                            type=\"password\"\n                                            placeholder=\"Password\"\n                                            name='password'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.password && touched.password}\n                                        />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.password}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n\n                                    <Form.Group controlId=\"formConfirmPassword\">\n                                        <Form.Label>Confirm Password</Form.Label>\n                                        <Form.Control\n                                            type=\"password\"\n                                            placeholder=\"Password\"\n                                            name='confirm_password'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.confirm_password && touched.confirm_password}\n                                        />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.confirm_password}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                    <Button size=\"sm\" block=\"true\" variant=\"link\" onClick={this.switchToLogin}>\n                                        Aready registered? Log in\n                                    </Button> {' '}\n                                    <Button block=\"true\" className=\"Submit_Buttom\" variant=\"primary\" type=\"submit\">\n                                        Join\n                                    </Button>\n                                </Form>\n                            )}\n                        </Formik>\n                    </Modal.Body>\n                </Modal>}\n            </div>\n        );\n    }\n}\n\nexport default Login;","import React, {Component} from 'react';\nimport '../style/App.css';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Main from \"./Main\";\nimport Login from \"./Login\";\nimport {TOKEN_KEY} from '../constants';\n\nclass App extends Component {\n    state = { //states used to activated login or register form.\n        showLoginForm: false,\n        showRegisterForm: false,\n        isLoggedIn: localStorage.getItem(TOKEN_KEY) !== null,\n    }\n\n    showLoginForm = (show) => {\n        this.setState({\n            showLoginForm: show\n        });\n    }\n\n    showRegisterForm = (show) => {\n        this.setState({\n            showRegisterForm: show\n        });\n    }\n\n    loggedIn = () => {\n        this.setState({\n            isLoggedIn: true\n        });\n    }\n\n    loggedOut = () => {\n        this.setState({\n            isLoggedIn : false\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header showLoginForm={this.showLoginForm}\n                        showRegisterForm={this.showRegisterForm}\n                        isLoggedIn={this.state.isLoggedIn}\n                        loggedOut={this.loggedOut}\n                />\n\n                <Login isLoginForm={this.state.showLoginForm}\n                       isRegisterForm={this.state.showRegisterForm}\n                       showLoginForm = {this.showLoginForm}\n                       showRegisterForm={this.showRegisterForm}\n                       loggedIn={this.loggedIn}\n                />\n\n                <Main />\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    ,\n    document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}